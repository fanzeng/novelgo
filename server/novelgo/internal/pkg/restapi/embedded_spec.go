// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "novelgo server API",
    "title": "novelgo",
    "version": "1.0.0"
  },
  "paths": {
    "/games": {
      "get": {
        "summary": "List all games",
        "operationId": "listGames",
        "responses": {
          "200": {
            "description": "An array of games",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Game"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new game",
        "operationId": "createGame",
        "parameters": [
          {
            "description": "Game object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Game created",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        }
      }
    },
    "/games/{gameId}": {
      "get": {
        "summary": "Get a game by ID",
        "operationId": "getGameById",
        "parameters": [
          {
            "type": "string",
            "name": "gameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Game details",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "404": {
            "description": "Game not found"
          }
        }
      },
      "put": {
        "summary": "Update an existing game",
        "operationId": "updateGame",
        "parameters": [
          {
            "type": "string",
            "name": "gameId",
            "in": "path",
            "required": true
          },
          {
            "description": "Game object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game updated",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "404": {
            "description": "Game not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a game by ID",
        "operationId": "deleteGame",
        "parameters": [
          {
            "type": "string",
            "name": "gameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Game deleted"
          },
          "404": {
            "description": "Game not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Game": {
      "type": "object",
      "required": [
        "Settings"
      ],
      "properties": {
        "Gameplay": {
          "type": "object",
          "properties": {
            "BoardGridPoints": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "PlayerMoves": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "Row",
                  "Col"
                ],
                "properties": {
                  "Col": {
                    "type": "integer"
                  },
                  "Row": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Settings": {
          "$ref": "#/definitions/GameSettings"
        }
      }
    },
    "GameSettings": {
      "type": "object",
      "required": [
        "BoardWidth",
        "BoardHeight",
        "CyclicLogic",
        "GameMode"
      ],
      "properties": {
        "BoardHeight": {
          "type": "integer"
        },
        "BoardWidth": {
          "type": "integer"
        },
        "CyclicLogic": {
          "type": "boolean"
        },
        "GameMode": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "novelgo server API",
    "title": "novelgo",
    "version": "1.0.0"
  },
  "paths": {
    "/games": {
      "get": {
        "summary": "List all games",
        "operationId": "listGames",
        "responses": {
          "200": {
            "description": "An array of games",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Game"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new game",
        "operationId": "createGame",
        "parameters": [
          {
            "description": "Game object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Game created",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        }
      }
    },
    "/games/{gameId}": {
      "get": {
        "summary": "Get a game by ID",
        "operationId": "getGameById",
        "parameters": [
          {
            "type": "string",
            "name": "gameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Game details",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "404": {
            "description": "Game not found"
          }
        }
      },
      "put": {
        "summary": "Update an existing game",
        "operationId": "updateGame",
        "parameters": [
          {
            "type": "string",
            "name": "gameId",
            "in": "path",
            "required": true
          },
          {
            "description": "Game object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game updated",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "404": {
            "description": "Game not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a game by ID",
        "operationId": "deleteGame",
        "parameters": [
          {
            "type": "string",
            "name": "gameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Game deleted"
          },
          "404": {
            "description": "Game not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Game": {
      "type": "object",
      "required": [
        "Settings"
      ],
      "properties": {
        "Gameplay": {
          "type": "object",
          "properties": {
            "BoardGridPoints": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "PlayerMoves": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GameGameplayPlayerMovesItems0"
              }
            }
          }
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Settings": {
          "$ref": "#/definitions/GameSettings"
        }
      }
    },
    "GameGameplay": {
      "type": "object",
      "properties": {
        "BoardGridPoints": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "PlayerMoves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameGameplayPlayerMovesItems0"
          }
        }
      }
    },
    "GameGameplayPlayerMovesItems0": {
      "type": "object",
      "required": [
        "Row",
        "Col"
      ],
      "properties": {
        "Col": {
          "type": "integer"
        },
        "Row": {
          "type": "integer"
        }
      }
    },
    "GameSettings": {
      "type": "object",
      "required": [
        "BoardWidth",
        "BoardHeight",
        "CyclicLogic",
        "GameMode"
      ],
      "properties": {
        "BoardHeight": {
          "type": "integer"
        },
        "BoardWidth": {
          "type": "integer"
        },
        "CyclicLogic": {
          "type": "boolean"
        },
        "GameMode": {
          "type": "string"
        }
      }
    }
  }
}`))
}
